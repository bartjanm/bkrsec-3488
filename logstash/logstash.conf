## This file has been used for the Cisco Live Barcelona presentation BKRSEC-3488
## It should be seen as "Educational" and "Proof of concept" 
## Please take care before using this in production. 

## For more documentation: Please look at the slidedeck! 

# Reads JSON files, as outputted from eNcore, into Logstash
input {
   file {
      codec => "json"
      path => [  
         "/opt/eStreamer-eNcore/data/json/encore.*.json",
      ]	
      type => "encore"
   }
}
filter {
# Explictly setting the date is best practice in Logstash

  date {
     match => [ "[@computed][eventDateTime]" , "ISO8601" ]
  }

# In firepower we have Initiator and source addresses and we have 
# Responder and Destination adresses. 
# While not 100% the same, I choose to equate them for sake of reporting. 

# This if checks if the field "initiatorIpAddress" is present. Works for numeric fields.
  if ([initiatorIpAddress]) {
      mutate {
        rename => { 
           "initiatorIpAddress" => "sourceIpAddress"
           "responderIpAddress" => "destinationIpAddress"
           "initiatorPort" => "sourcePort"
           "responderPort" => "destinationPort"
           
	}
    }
  }
  if (["sourceIpv6Address"]) {
      mutate {
         rename => {
            "sourceIpv6Address" => "sourceIpAddress"
            "destinationIpv6Address" => "destinationIpAddress"
         }
      } 
  } 
  if (["ipv6Address"]) {
     mutate { 
        rename => { "ipv6Address" => "hostIpAddress"}
     } 
     mutate {
        remove_field => ["legacyIpAddress"] 
	}
  }
# Get a single, uniform domainname to check with Investigate API
# Two fields are present in the dataset with URL data, never at the same time. I'm using *uri* so if ClientUrl excist I'll rename it.  

# this IF checks if [clientUrl][data] is present. This works for text fields.

  if ("" in [clientUrl][data]) {
      mutate { 
         rename => { "clientUrl" => "uri" } 
	 }
   }
# if uri excists, then find the relevant fields using grok
   if ("" in [uri][data]) {
      grok {
         match => [ "[uri][data]", "%{URIPROTO:[uri][uri_proto]}://(?:%{USER:[uri][user]}(?::[^@]*)?@)?(?:%{URIHOST:[uri][domain]})?(?:%{URIPATHPARAM:[uri][uri_param]})?" ]
      }  
   }
#This checks if [uri][domain] is actually a syntactical correct domain I didn't bother to check if it is actually a registered TLD

  if [uri][domain] =~ /[[:alpha:]][[:alnum:]\-]*\.[[:alpha:]][[:alnum:]\-]*$/ {
      rest {
         sprintf => true
         json => true                         # boolean (optional, default = true)
         target => "temp"                   # string See slide deck for details regarding temp
         request => {
            url => "https://investigate.api.umbrella.com/domains/categorization/%{[uri][domain]}?showLabels"
	    headers => {                       # hash (optional)
                "Authorization" => "Bearer "
            }
            auth => {
               user => ""
               password => ""
            }  
         }
       }
      mutate {
         rename => {"[temp][%{[uri][domain]}]" => "[temp][url]"}
      }
      mutate {
        copy => {"[temp][url]" => "investigate"}
      }
      mutate {
        remove_field => ["temp"]
      }

# Second API endpoint, not in the slides, but should be easy to understand after the presentation.
      rest {
         sprintf => true
         json => true                         # boolean (optional, default = true)
         target => "temp2"                   # string (mandatory, no default)
         request => {
         url => "https://investigate.api.umbrella.com/url/%{[uri][domain]}/classifiers" 
	 headers => {                       # hash (optional)
                "Authorization" => "Bearer"
            }
            auth => {
               user => ""
               password => ""
            }
         }
      }
      mutate {
         copy => {		
            "[temp2][threatTypes]" => "[investigate][threatTypes]"
            "[temp2][attacks]" => "[investigate][attacks]"
         }
       }
      mutate { 
         remove_field => ["temp2"]
      }
   }
   else {
      mutate {
         update => {"[uri][domain]"  => "__NODOMAIN"}
      }
	
   }

# Geop IP blocks for all IP adress fields. HostIp is used in AMP logs. 
   geoip {
      source => "sourceIpAddress"
      target => "sourceGeoIp"
      database => "/etc/logstash/GeoLite2-City.mmdb"
   }
    geoip {
      source => "destinationIpAddress"
      target => "destinationGeoIp"
      database => "/etc/logstash/GeoLite2-City.mmdb"
    }
    geoip { 
      source => "hostIpAddress"
      target => "hostGeoIp"
      database => "/etc/logstash/GeoLite2-City.mmdb"
    }
}
# here AWS Elastic Search is used: defaults to IP adress filtering for auth. you might wat to use something more secure.
output {
    elasticsearch {
       hosts => [ "https://.amazonaws.com:443" ]
       ssl => true
       index => "cl18-encore"
    }
}
